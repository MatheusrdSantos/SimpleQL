// @ts-check

const loginPlugin = require('./login');
const securityPlugin = require('./security');
const stripePlugin = require('./stripe');

/** @typedef {{ authId: string | number } & Object.<string, any>} Local */

/**
 * @typedef {Object} OnEventParam
 * @property {import('../utils').Request} request The current request in the tables
 * @property {import('../utils').Request=} parent The request that generated this request if any
 * @property {Local} local The current request local variables (like authId). You can read them or edit them directly through this object.
 * @property {import('../utils').QueryFunction} query A function that you can use to make a SimpleQL query to the database.
 * @property {boolean} isAdmin A boolean indicating if the current request is being executed as an administrator.
 */

/**
 * A function that will make sure that the plugin is correctly configured.
 * @callback Prerequisite
 * @param {import('../utils').FormattedTablesDeclaration} tables The object containing the declaration of the tables
 * @returns {Promise<void>} A promise that will resolve when the tables got checked
 */

/**
 * @typedef {Object} UpdateResults
 * @property {import('../utils').Element[]} objects The objects being edited
 * @property {import('../utils').Element} newValues The new values affected to the objects
 * @property {Object.<string | number, import('../utils').Element>} oldValues An object mapping the id of each object being edited to their old values
**/

/**
 * @typedef {Object} ListUpdateResults
 * @property {import('../utils').Element[]} objects The objects being edited
 * @property {Object.<string, import('../utils').Element[]>} added An object containing the list of objects being added to each field
 * @property {Object.<string, import('../utils').Element[]>} removed An object containing the list of objects being removed to each field
**/

/** @typedef {Object.<string, (request: import('../utils').Request, onEvent: OnEventParam) => Promise<void>>} onRequest **/
/** @typedef {Object.<string, (createdObject: import('../utils').Element, onEvent: OnEventParam) => Promise<void>>} onCreation **/
/** @typedef {Object.<string, (deletedObjectsArray: import('../utils').Element[], onEvent: OnEventParam) => Promise<void>>} onDeletion **/
/** @typedef {Object.<string, (results: import('../utils').Element[], onEvent: OnEventParam) => Promise<import('../utils').Element[]>>} onProcessing **/
/** @typedef {Object.<string, (results: import('../utils').Element[], onEvent: OnEventParam) => Promise<void>>} onResult **/
/** @typedef {(results: import('../utils').Result, onEvent: OnEventParam) => Promise<void>} onSuccess **/
/** @typedef {(error: import('../errors').Error, onEvent: OnEventParam) => Promise<void>} onError **/
/** @typedef {Object.<string, (results: UpdateResults, onEvent: OnEventParam) => Promise<import('../utils').Element[]>>} onUpdate **/
/** @typedef {Object.<string, (results: ListUpdateResults, onEvent: OnEventParam) => Promise<import('../utils').Element[]>>} onListUpdate **/

/**
 * @typedef {Object} Plugin
 * @property {Prerequisite=} preRequisite A function that will make sure that the plugin is correctly configurated.
 * @property {import('express').RequestHandler=} middleware A middleware that might intercept the whole request.
 * @property {import('express').ErrorRequestHandler=} errorHandler A middleware able to handle errors generated by this plugin before being sent to the user
 * @property {onRequest=} onRequest An object containing functions being called before any request in a specific table.
 * @property {onCreation=} onCreation An object containing functions being called each time an element is created into a specific table.
 * @property {onDeletion=} onDeletion An object containing functions being called each time an element is deleted from a specific table.
 * @property {onProcessing=} onProcessing An object containing functions being called after the execution of every depending request, but before any changes have been applied to the current results.
 * @property {onResult=} onResult An object containing functions being called after a request was resolved in a specific table.
 * @property {onSuccess=} onSuccess An object containing functions being called when the whole request succeeds to resolve in the database and is about to be commited.
 * @property {onError=} onError An object containing functions being called when a request failed to resolve in the database and is about to be rolled back.
 * @property {onUpdate=} onUpdate An object containing functions being called after data have been changed in a specific table.
 * @property {onListUpdate=} onListUpdate An object containing functions being called after some objects have been linked or unlinked to existing objects of the specified teblaes.
 */

module.exports = {
  loginPlugin,
  securityPlugin,
  stripePlugin
};
